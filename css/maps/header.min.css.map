{"version":3,"sources":["header/header.scss","../styles/helpers/_mixins-svg.scss","header/header.css"],"names":[],"mappings":"AASK,sBCsEJ,QAAA,aACA,iBAAA,uBACA,gBAAA,KAAA,KC7DC,MAAA,KACA,OAAA,KACA,oBAAA,KAAA,KACA,QAAA,GACA,SAAA,SACA,IAAA,IACA,KAAA,EACA,kBAAA,sBAAA,UAAA,sBArBF,eFDQ,QAAA,YAAA,QAAA,YAAA,QAAA,KACA,kBAAA,OAAA,eAAA,OAAA,YAAA,OACA,iBAAA,QAAA,cAAA,QAAA,gBAAA,cEGN,OAAA,MAGF,cFDQ,SAAA,SAHH,MAAA,KEOH,OAAA","file":"../header.min.css","sourcesContent":["@import \"../../styles/helpers/_helpers\";\n\n.header {\n    &__inner {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        height: 129px;\n    }\n    &__menu {\n        position: relative;\n        width: 25px;\n        height: 17px;\n        &::before {\n            @include svgsprite(burger);\n            content: \"\";\n            position: absolute;\n            top: 50%;\n            left: 0;\n            transform: translate3d( 0 -50%, 0);\n        }\n    }\n}\n","////\n/// @author Mike Street\n/// @group Sprite\n////\n\n\n// The following variable and function originate from the sass-mq library.\n// If you have already included it, you can eliminate the below\n// https://github.com/sass-mq/sass-mq/blob/master/_mq.scss\n\n/// Base font size on the `<body>` element\n/// @type Number (unit)\n$mq-base-font-size: 16px !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n/// @param {Number} $base-font-size ($mq-base-font-size) - `<body>` font size\n///\n/// @example scss\n///  $font-size-in-ems: mq-px2em(16px);\n///  p { font-size: mq-px2em(16px); }\n///\n/// @requires $mq-base-font-size\n/// @returns {Number}\n@function mq-px2em($px, $base-font-size: $mq-base-font-size) {\n    @if unitless($px) {\n        @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n        @return mq-px2em($px + 0px); // That may fail.\n    } @else if unit($px) == em {\n        @return $px;\n    }\n    @return $px;\n    // @return ($px / $base-font-size) * 1em;\n}\n\n\n/// Set the `$sprite` map\n/// @group sprite\n$sprite: map-get($icons, sprite) !default;\n\n/// Retrive an attributes value for a specific icon in the sprite map\n/// @param {string} $icon - The name of the icon\n/// @param {string} $attr - The attribute you wish to retrieve (e.g. width)\n@function sprite-attr($icon, $attr) {\n\t$newIcon: map-get($icons, $icon);\n\t@if $newIcon == null {\n\t\t@warn \"Can't find an icon with the name #{$icon}\";\n\t}\n\t@return map-get($newIcon, $attr);\n}\n\n/// Create a map with the specified icon of attributes\n/// @param {string} $icon - The name of the icon\n@function icon-attr($icon) {\n\t$attr: (\n\t\twidth: sprite-attr($icon, width),\n\t\theight: sprite-attr($icon, height),\n\t\tx: sprite-attr($icon, backgroundX),\n\t\ty: sprite-attr($icon, backgroundY)\n\t);\n\n\t@return $attr;\n}\n\n/// Get the width of an icon in em\n/// @param {string} $icon - The name of the icon\n@function icon_width($icon) {\n\t@return mq-px2em(sprite-attr($icon, width));\n}\n\n/// Get the height of an icon in em\n/// @param {string} $icon - The name of the icon\n@function icon_height($icon) {\n\t@return mq-px2em(sprite-attr($icon, height));\n}\n\n/// Assign the correct SVG background image and dimensions to the element\n%svgsprite {\n\tdisplay: inline-block;\n\tbackground-image: url(map-get($sprite, svgPath));\n\tbackground-size: mq-px2em(map-get($sprite, width)) mq-px2em(map-get($sprite, height));\n}\n\n\n/// Add an SVG sprite icon using em positioning\n/// @param {string} $icon - The name of the icon\n/// @param {string} $type [all] - The properties wanted (can be `all`, `size` or `bg`).\n/// - `all` ensures the icon has the background, position and size.\n/// - `size` is just for dimensions\n/// - `bg` just  applies the backgrounds to an element\n/// @example scss - Usage\n/// .class {\n/// \t@include sprite(arrow);\n/// \t&:hover {\n/// \t\t@include sprite(arrowDown, bg)\n/// \t}\n/// }\n///\n/// @example css - Output\n/// .class {\n/// \tdisplay: inline-block;\n/// \tbackground-image: url(\"../img/sprite.svg\");\n/// \tbackground-size: 34.25em 32.1875em;\n/// }\n///\n///\n/// .class {\n/// \twidth: 1.3125em;\n/// \theight: 1.3125em;\n/// \tbackground-position: -0.3125em -0.3125em;\n/// }\n/// .class:hover {\n/// \tbackground-position: -2.25em -2.25em;\n/// }\n@mixin svgsprite($icon, $type: all) {\n\t@if $type == all {\n\t\t// Shares the backgrounds\n\t\t@extend %svgsprite;\n\t}\n\n\t$iconMap: icon-attr($icon);\n\n\t// Outputs dimensions in em\n\t@if $type == all or $type == size {\n\t\twidth: mq-px2em(map-get($iconMap, width) + 1);\n\t\theight: mq-px2em(map-get($iconMap, height) + 1);\n\t}\n\n\t// Outputs background position in em\n\t@if $type == all or $type == bg {\n\t\tbackground-position: mq-px2em(map-get($iconMap, x) - 5) mq-px2em(map-get($iconMap, y) - 5);\n\t}\n}\n",".header__menu::before {\n  display: inline-block;\n  background-image: url(\"../img/sprite.svg\");\n  background-size: 90px 56px;\n}\n\n.header__inner {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  height: 129px;\n}\n\n.header__menu {\n  position: relative;\n  width: 25px;\n  height: 17px;\n}\n\n.header__menu::before {\n  width: 25px;\n  height: 17px;\n  background-position: -5px -5px;\n  content: \"\";\n  position: absolute;\n  top: 50%;\n  left: 0;\n  transform: translate3d(0 -50%, 0);\n}"]}